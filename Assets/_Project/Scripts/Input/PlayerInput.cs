//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Project/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace ProjectBPop.Input
{
    public partial class @PlayerInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Normal Mode"",
            ""id"": ""4b739bcd-777b-4ab4-a1ae-1a0c31d39498"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""7920fabc-599a-410c-9a1a-10296b948258"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""54af84f2-27da-4c08-b31a-42104a939973"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""6d2b116e-d5ce-43ab-9975-5051c1051206"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""e687b123-3274-4c7e-a381-f7b70657c284"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab Magic"",
                    ""type"": ""Button"",
                    ""id"": ""31e2aeba-bfd1-4080-ba5d-0a945a4b05b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire Magic"",
                    ""type"": ""Button"",
                    ""id"": ""1bab820f-b567-438a-9d11-87695c8e7cad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""de63d82a-1699-452a-a5fd-4e20b707eb13"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""745fa0e8-bd8d-4c5d-81a9-44e7b1c09b6b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6f5fdadd-4169-4775-81f1-33786715a674"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7387dab4-49d3-4135-9dd4-2b5f5d7c9f1d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""db81a1b2-43ba-455a-89cf-a59cd387f1ee"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""7c6a6a1d-0070-459f-9579-f215f86e4d3d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b9d82b77-0021-47e6-b179-e99d46e8e5f2"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d6313821-f24a-4d4f-ab74-b2270a45afbf"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fd924619-2ec1-467a-9578-fac61a748d18"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d7f520cc-5d15-4055-b858-7d793fd564bd"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8aae846b-4c6e-4171-954b-bc51fc49aaa5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03fe1a85-7964-4aeb-ac38-dbd6179d58f7"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30d07e4d-1816-4dd1-aeda-1bd470c07139"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66e2cfc1-b842-45d3-8542-723036562c8b"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""162e262a-b12e-404f-b044-f5f43e748824"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab Magic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebbfa237-e6b9-4ae5-84ff-db8487dadad1"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire Magic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bcd06e1f-cd1d-4abd-b6a6-933d8e5a6998"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Magic Mode"",
            ""id"": ""e1d13b46-e1fc-4664-b9d2-20625593ab2d"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""e4578aa2-93ee-4c9b-83f5-da8e4a802ff6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e41184dd-ed31-41f5-bd96-4795683dc9b1"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Normal Mode
            m_NormalMode = asset.FindActionMap("Normal Mode", throwIfNotFound: true);
            m_NormalMode_Move = m_NormalMode.FindAction("Move", throwIfNotFound: true);
            m_NormalMode_Jump = m_NormalMode.FindAction("Jump", throwIfNotFound: true);
            m_NormalMode_Look = m_NormalMode.FindAction("Look", throwIfNotFound: true);
            m_NormalMode_Interact = m_NormalMode.FindAction("Interact", throwIfNotFound: true);
            m_NormalMode_GrabMagic = m_NormalMode.FindAction("Grab Magic", throwIfNotFound: true);
            m_NormalMode_FireMagic = m_NormalMode.FindAction("Fire Magic", throwIfNotFound: true);
            // Magic Mode
            m_MagicMode = asset.FindActionMap("Magic Mode", throwIfNotFound: true);
            m_MagicMode_Newaction = m_MagicMode.FindAction("New action", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Normal Mode
        private readonly InputActionMap m_NormalMode;
        private List<INormalModeActions> m_NormalModeActionsCallbackInterfaces = new List<INormalModeActions>();
        private readonly InputAction m_NormalMode_Move;
        private readonly InputAction m_NormalMode_Jump;
        private readonly InputAction m_NormalMode_Look;
        private readonly InputAction m_NormalMode_Interact;
        private readonly InputAction m_NormalMode_GrabMagic;
        private readonly InputAction m_NormalMode_FireMagic;
        public struct NormalModeActions
        {
            private @PlayerInput m_Wrapper;
            public NormalModeActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_NormalMode_Move;
            public InputAction @Jump => m_Wrapper.m_NormalMode_Jump;
            public InputAction @Look => m_Wrapper.m_NormalMode_Look;
            public InputAction @Interact => m_Wrapper.m_NormalMode_Interact;
            public InputAction @GrabMagic => m_Wrapper.m_NormalMode_GrabMagic;
            public InputAction @FireMagic => m_Wrapper.m_NormalMode_FireMagic;
            public InputActionMap Get() { return m_Wrapper.m_NormalMode; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(NormalModeActions set) { return set.Get(); }
            public void AddCallbacks(INormalModeActions instance)
            {
                if (instance == null || m_Wrapper.m_NormalModeActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_NormalModeActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @GrabMagic.started += instance.OnGrabMagic;
                @GrabMagic.performed += instance.OnGrabMagic;
                @GrabMagic.canceled += instance.OnGrabMagic;
                @FireMagic.started += instance.OnFireMagic;
                @FireMagic.performed += instance.OnFireMagic;
                @FireMagic.canceled += instance.OnFireMagic;
            }

            private void UnregisterCallbacks(INormalModeActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Look.started -= instance.OnLook;
                @Look.performed -= instance.OnLook;
                @Look.canceled -= instance.OnLook;
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
                @GrabMagic.started -= instance.OnGrabMagic;
                @GrabMagic.performed -= instance.OnGrabMagic;
                @GrabMagic.canceled -= instance.OnGrabMagic;
                @FireMagic.started -= instance.OnFireMagic;
                @FireMagic.performed -= instance.OnFireMagic;
                @FireMagic.canceled -= instance.OnFireMagic;
            }

            public void RemoveCallbacks(INormalModeActions instance)
            {
                if (m_Wrapper.m_NormalModeActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(INormalModeActions instance)
            {
                foreach (var item in m_Wrapper.m_NormalModeActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_NormalModeActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public NormalModeActions @NormalMode => new NormalModeActions(this);

        // Magic Mode
        private readonly InputActionMap m_MagicMode;
        private List<IMagicModeActions> m_MagicModeActionsCallbackInterfaces = new List<IMagicModeActions>();
        private readonly InputAction m_MagicMode_Newaction;
        public struct MagicModeActions
        {
            private @PlayerInput m_Wrapper;
            public MagicModeActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_MagicMode_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_MagicMode; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MagicModeActions set) { return set.Get(); }
            public void AddCallbacks(IMagicModeActions instance)
            {
                if (instance == null || m_Wrapper.m_MagicModeActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MagicModeActionsCallbackInterfaces.Add(instance);
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }

            private void UnregisterCallbacks(IMagicModeActions instance)
            {
                @Newaction.started -= instance.OnNewaction;
                @Newaction.performed -= instance.OnNewaction;
                @Newaction.canceled -= instance.OnNewaction;
            }

            public void RemoveCallbacks(IMagicModeActions instance)
            {
                if (m_Wrapper.m_MagicModeActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMagicModeActions instance)
            {
                foreach (var item in m_Wrapper.m_MagicModeActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MagicModeActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MagicModeActions @MagicMode => new MagicModeActions(this);
        public interface INormalModeActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
            void OnGrabMagic(InputAction.CallbackContext context);
            void OnFireMagic(InputAction.CallbackContext context);
        }
        public interface IMagicModeActions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
    }
}
